name: 编译LLVM工具链4

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装工具链
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential binutils wget unzip ninja-build

      - name: 下载Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r27c-linux.zip
          unzip android-ndk-r27c-linux.zip
          echo "NDK_HOME=$(pwd)/android-ndk-r27c" >> $GITHUB_ENV

      - name: 为构建安装创建目录     
        run: |
          mkdir llvm-project-18.1.8.src android build-llvm
          echo "build_llvm=$(pwd)/build-llvm" >> $GITHUB_ENV
          echo "installprefix=$(pwd)/android" >> $GITHUB_ENV
          ls
        
      - name: 下载LLVMProject项目资源解压并删除
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/llvm-project-18.1.8.src.tar.xz
          tar -xJf llvm-project-18.1.8.src.tar.xz
          echo "LLVM_DIR=$(pwd)/llvm-project-18.1.8.src" >> $GITHUB_ENV
          rm android-ndk-r27c-linux.zip
          rm llvm-project-18.1.8.src.tar.xz
          ls

      - name: 开始编译LLVMProject
        run: |    
          # 修改CMakeLists.txt以支持Android构建
          export LD_LIBRARY_PATH="$(pwd)/android/lib"
          sed -i "13i\if(NOT ANDROID)" $LLVM_DIR/llvm/lib/Transforms/Hello/CMakeLists.txt
          sed -i "21a\endif()" $LLVM_DIR/llvm/lib/Transforms/Hello/CMakeLists.txt
          sed -i "17i\if(NOT ANDROID)" $LLVM_DIR/llvm/tools/bugpoint-passes/CMakeLists.txt
          sed -i "24a\endif()" $LLVM_DIR/llvm/tools/bugpoint-passes/CMakeLists.txt
          sed -i 's/if (NOT WIN32 AND NOT CYGWIN)/if (NOT WIN32 AND NOT ANDROID)/g' $LLVM_DIR/llvm/examples/Bye/CMakeLists.txt
          sed -i 's/if (NOT WIN32 AND NOT CYGWIN)/if (NOT WIN32 AND NOT ANDROID)/g' $LLVM_DIR/llvm/examples/IRTransforms/CMakeLists.txt

          # 使用CMake配置构建
          cmake -G Ninja -S $LLVM_DIR/llvm -B $build_llvm \
                -DLLVM_INSTALL_UTILS=ON \
                -DLLD_VENDOR="星空 QQ:5403293" \
                -DCLANG_VENDOR="星空 QQ:5403293" \
                -DLLVM_ENABLE_PROJECTS="clang;lld" \
                -DLLVM_TARGETS_TO_BUILD="ARM;AArch64;X86" \
                -DCMAKE_TOOLCHAIN_FILE=$NDK_HOME/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI="arm64-v8a" \
                -DANDROID_PLATFORM=android-30 \
                -DCMAKE_INSTALL_PREFIX=android \
                -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
                -DCMAKE_CXX_FLAGS="-s -Wno-unused-command-line-argument" \
                -DCMAKE_C_FLAGS="-s -Wno-unused-command-line-argument" \
                -DLLVM_INCLUDE_TESTS=OFF \
                -DLLVM_BUILD_TESTS=OFF \
                -DCMAKE_INSTALL_RPATH=""android/lib"" \
                -DLLVM_INCLUDE_BENCHMARKS=OFF \
                -DLLVM_INCLUDE_EXAMPLES=OFF \
                -DLLVM_INCLUDE_DOCS=OFF \
                -DCLANG_INCLUDE_DOCS=OFF \
                -DCLANG_INCLUDE_TESTS=OFF \
                -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
                -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
                -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
                -DLLVM_ENABLE_LIBXML2=OFF \
                -DLLVM_LINK_LLVM_DYLIB=ON \
                -DCLANG_LINK_CLANG_DYLIB=ON \
                -DCMAKE_BUILD_TYPE=Release
          # 编译LLVM
          ninja -j8 -C $build_llvm install
               
      - name: 开始压缩工具链
        run: |
          tar -cJf llvm-output.tar.xz android

      - name: 上传文件
        uses: actions/upload-artifact@v4
        with:
          name: llvm-output
          path: llvm-output.tar.xz
